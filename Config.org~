#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* basic ui configuration
  #+begin_src emacs-lisp 

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)

  #+end_src 
** font and theme configuration
  
  #+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Victor Mono" :height 120)

;;(load-theme 'doom-oceanic-next t)
(load-theme 'doom-spacegrey t)
  #+end_src

** line number configuration
#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		eshell-mode-hook
		shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** misc configuration
   Changing the escape key to exit out of a window.

   #+begin_src emacs-lisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src

** emacs transparency
   #+begin_src emacs-lisp
     (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
     (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
     (add-to-list 'default-frame-alist '(fullscreen . maximized)) 
   #+end_src
* package archives and use-package configuration
** package archives configuration
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

#+end_src
** [[https://github.com/jwiegley/use-package][use-package]] installation and configuration
#+begin_src emacs-lisp
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
* packages
** [[https://github.com/Faneal/rainbow-delimiters][rainbow-delimiters]] package
  the package will give some very nice highlighting, which can be very useful which matching parenthesis.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
** [[https://github.com/abo-abo/swiper][ivy package]] and configuration
  ivy is an interactive completion system in emacs.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src
** status bar - doom modeline
*** all-the-icons package
  this package will enable icons in the doom-modeline package, whose configuration is below.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
*** doom-modeline itself and its configuration
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src
** doom-themes package
  installs some themes including gruvbox which is the theme that I am using.
#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src
** which-key package
   this package will display the keybindings in a pop up window.
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

#+end_src
** counsel package
   the counsel package will use ivy for autocompleting commands
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))
#+end_src
** helpful package
   better help menu
#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** functions to setup hotkeys for opening programs
*** brave browser
    #+begin_src emacs-lisp
      (defun tb/brave-open ()
	(interactive)
	(start-process-shell-command
	 "brave" nil "brave"))
    #+end_src
*** pavucontrol
    #+begin_src emacs-lisp
      (defun tb/pavucontrol-open ()
	(interactive)
	(start-process-shell-command
	 "pavucontrol" nil "pavucontrol"))
    #+end_src
** general package / configuration
   better interface for creating keybindings
*** installing [[https://github.com/noctuid/general.el][general.el]]
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
#+end_src

*** creating toggles
#+begin_src emacs-lisp
  (rune/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "k"  '(kill-current-buffer :which-key "kill current buffer")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "tb" '(counsel-switch-buffer :which-key "switch buffer")
#+end_src

*** org keybindings
#+begin_src emacs-lisp
      "o"  '(:ignore o :which-key "org")
      "oa" '(org-agenda-list :which-key "org agenda list")
      "oo" '(org-agenda :which-key "org agenda list")
      "ot" '(org-babel-tangle :which-key "tangle file")
#+end_src

*** magit keybindings
#+begin_src emacs-lisp
      "m"  '(:ignore m :which-key "magit")
      "ms" '(magit-status :which-key "magit status")
#+end_src

*** exwm keybindings
#+begin_src emacs-lisp
      "e"  '(:ignore e :which-key "exwm")
      "eh" '(windmove-left :which-key "move focus left")
      "ej" '(windmove-down :which-key "move focus down")
      "ek" '(windmove-up :which-key "move focus up")
      "el" '(windmove-right :which-key "move focus right")
      "es" '(exwm-workspace-switch-to-buffer :which-key "workspace switch to buffer")
#+end_src

*** application launching keybindings
#+begin_src emacs-lisp
      "a"  '(:ignore a :which-key "applications")
      "ab" '(tb/brave-open :which-key "open brave browser")
      "av" '(tb/pavucontrol-open :which-key "volume control")
#+end_src

*** window-management keybindings
#+begin_src emacs-lisp
      "w"  '(:ignore w :which-key "window management")
      "wk" '(kill-buffer :which-key "kill buffer")
      "ws" '(counsel-switch-buffer :which-key "switch buffer")
      "wf" '(exwm-floating-toggle-floating :which-key "toggle floating")
#+end_src

*** org-roam keybindings
#+begin_src emacs-lisp
      "n"  '(:ignore n :which-key "notes")
      "nr" '(:ignore nr :which-key "roam")
      "nrc" '(org-roam-capture :which-key "capture")
      "nrb" '(org-roam-switch-to-buffer :which-key "switch to buffer")
      "nrf" '(org-roam-find-file :which-key "find file")
      "nri" '(org-roam-insert :which-key "insert link")))
  (rune/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

*** counsel-switch-buffer
#+begin_src emacs-lisp
  (general-define-key
   "C-M-j" 'counsel-switch-buffer)
#+end_src
** evil package
*** function to add evil mode in which modes 
 #+begin_src emacs-lisp
 (defun rune/evil-hook ()
   (dolist (mode '(custom-mode
		   eshell-mode
		   git-rebase-mode
		   erc-mode
		   circe-server-mode
		   circe-chat-mode
		   circe-query-mode
		   sauron-mode
		   term-mode))
     (add-to-list 'evil-emacs-state-modes mode)))

 #+end_src
*** installing and configuring evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
;;  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
;;  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

#+end_src
*** evil-collection package
    the evil-collection package will help you add evil modes in numerous other modes.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))

#+end_src
** hydra package
   the hydra package can create popup windows to do or execute a command which is done repeatedly by the user.
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
** hydra menus
#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

#+end_src
** projectile package
   the projectile package is an interface to interact with projects
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/fl/repos")
    (setq projectile-project-search-path '("~/fl/repos")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src
** counsel-projectile
   adding commands of ivy into projectile
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
** magit - git interface
   the magit interface, is a git porcelain on emacs, it is a very powerful tool!
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package forge)
#+end_src

* org mode
** installing and configuring the org mode package
#+begin_src emacs-lisp
(use-package org
  :config
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (setq org-ellipsis " ▾"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-directory "~/fl/org/")
  (setq org-agenda-files
      '("~/fl/org/Tasks.org" "~/fl/org/Birthdays.org" "~/fl/org/Habits.org"))
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
   ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
#+end_src
** org-bullet package
   the org-bullet package has the feature that it can change, how the different levels of heading looks, with symbols.
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
** centering org-mode
#+begin_src emacs-lisp
(defun tb/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . tb/org-mode-visual-fill))


#+end_src
** org babel templates
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))
#+end_src

* terminals
** term
   #+begin_src emacs-lisp
     (use-package term)
     (use-package eterm-256color
       :hook (term-mode . eterm-256color-mode))
   #+end_src
** vterm
   #+begin_src emacs-lisp
     (use-package vterm
       :commands vterm
       :config
       (setq vterm-max-scrollback 10000))

   #+end_src

** eshell
   #+begin_src emacs-lisp
(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . efs/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'powerline))

   #+end_src

* org-roam
#+begin_src emacs-lisp
(use-package org-roam)
(setq org-roam-directory "~/fl/org/slip-box")
#+end_src
* yasnippet
  #+begin_src emacs-lisp
    (use-package yasnippet)
    (yas-minor-mode-on)
  #+end_src
  
* org-tempo
  #+begin_src emacs-lisp
    (require 'org-tempo)
  #+end_src

* window management
** exwm configuration
*** exwm-update-class
#+begin_src emacs-lisp
  (defun tb/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

#+end_src
*** exwm-update-title
 #+begin_src emacs-lisp
(defun tb/exwm-update-title ()
  (pcase exwm-class-name
    ("B" (exwm-workspace-rename-buffer (format "Brave-browser: %s" exwm-title)))))
 #+end_src
*** exwm-configure-window-by-class
    #+begin_src emacs-lisp
      (defun efs/configure-window-by-class ()
	(interactive)
	(pcase exwm-class-name
	  ("Brave-browser" (exwm-workspace-move-window 0))))
    #+end_src
*** exwm init hook
    #+begin_src emacs-lisp
      (defun tb/exwm-init-hook ()
	;; Make workspace 1 be the one where we land at startup
	(exwm-workspace-switch-create 1)

	;; Open eshell by default
	;; (eshell)

	;; Show the time and date in modeline
	(setq display-time-day-and-date t)
	(display-time-mode 1))
    #+end_src
*** exwm package installation
#+begin_src emacs-lisp
  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)
    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'tb/exwm-update-class)
    ;; When EmacsWM starts up, do some extra configuration
    (add-hook 'exwm-init-hook #'tb/exwm-init-hook)
    ;; Update title hook
    (add-hook 'exwm-update-title-hook #'tb/exwm-update-title)
    ;; Configure windows as they're created
    (add-hook 'exwm-manage-finish-hook #'efs/configure-window-by-class)
    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
#+end_src
*** exwm-randr for resolution
#+begin_src emacs-lisp
  (require 'exwm-randr)
  (exwm-randr-enable)
  ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")
#+end_src
*** exwm-systemtray for enabling systemtray
#+begin_src emacs-lisp
  ;; Load the system tray before exwm-init
  (require 'exwm-systemtray)
  (setq exwm-systemtray-height 32)
  (exwm-systemtray-enable)

#+end_src
*** keybindings
#+begin_src emacs-lisp
  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j  ;; Buffer list
      ?\C-\ ))  ;; Ctrl+Space

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
	`(
	  ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	  ([?\s-r] . exwm-reset)

	  ;; Move between windows
	  ([s-left] . windmove-left)
	  ([s-q] . kill-current-buffer)
	  ([s-right] . windmove-right)
	  ([s-up] . windmove-up)
	  ([s-down] . windmove-down)
	  ;; Move between windows
	  ([s-h] . windmove-left)
	  ([s-l] . windmove-right)
	  ([s-k] . windmove-up)
	  ([s-j] . windmove-down)

	  ;; Launch applications via shell command
	  ([?\s-&] . (lambda (command)
		       (interactive (list (read-shell-command "$ ")))
		       (start-process-shell-command command nil command)))

	  ;; Switch workspace
	  ([?\s-w] . exwm-workspace-switch)
	  ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	  ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	  ,@(mapcar (lambda (i)
		      `(,(kbd (format "s-%d" i)) .
			(lambda ()
			  (interactive)
			  (exwm-workspace-switch-create ,i))))
		    (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
    (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
    (exwm-enable))
#+end_src

*** run in background
    function to run things in the background
    #+begin_src emacs-lisp
  (defun efs/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
    #+end_src
*** autostart
    #+begin_src emacs-lisp
	    (defun tb/autostart ()
	      (interactive)
	      (start-process-shell-command
	         "autostart" nil "~/.emacs.d/autostart"))

	    (tb/autostart)
    #+end_src
    
* dired config
  #+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
  #+end_src
